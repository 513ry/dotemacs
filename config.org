 #+SEQ_TODO:  Error(e) Empty(w) | Correct(c)

* config.org - configuration file for Emacs ~> 29
  *NOTE:* Please run this together with "init.el" file which should be placed in
  to your "~/.emacs.d".

  maintainer: siery@comic.com

** Copyright (C) 2017, 2020, 2025 Daniel Sierpiński
  You can redistribute this document and/or modify it under the terms of the GNU
  General Public License as published by the Free Software Foundation, either
  version 3 of the License, or (at your option) any later version.

  This document is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE.

  See the GNU General Public License for more details.


* Correct Runtime variables
  + Move all Custom settings variables to custom.el
  #+BEGIN_SRC emacs-lisp
    (setq custom-file "~/.emacs.d/custom.el")
    (load custom-file :noerror)
  #+END_SRC


* Correct Interface
  + Set user's data
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Daniel Sierpiński")
    (setq user-mail-address "siery@comic.com")
  #+END_SRC

  + Enable mouse support in terminal
  #+BEGIN_SRC emacs-lisp
    (xterm-mouse-mode)
  #+END_SRC

  + Enable cursor window switching
  #+BEGIN_SRC emacs-lisp
    (windmove-default-keybindings)
  #+END_SRC
  
  + Theme flex
  #+BEGIN_SRC emacs-lisp
    (use-package zerodark-theme
      :straight t
      :config
      (load-theme 'zerodark t))
  #+END_SRC

  + Font flex
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist '(font . "VictorMonoNerdFont 21"))
   #+END_SRC

  + Cursor flex
  #+BEGIN_SRC emacs-lisp
    (setq-default cursor-type 'box)
    (set-cursor-color "orange")
    (blink-cursor-mode -1)
   #+END_SRC

   + Region flex
  #+BEGIN_SRC emacs-lisp
    (set-face-attribute 'region nil :background "#65533c")
  #+END_SRC
   
  + Reset some unhandy interface
  #+BEGIN_SRC emacs-lisp
    ;; Twick text
    (setq initial-scratch-message ";; SCRATCH YOUR THOUGHTS HERE.\n\n")
    (setq inhibit-startup-echo-area-message (concat (concat user-full-name " configuration loaded at ") (format-time-string "%D")))
    (setq inhibit-startup-message t)

    ;; Debug
    (setq debug-on-error t)

    ;; Window interface
    (when window-system
      (tab-bar-mode -1)
      (tool-bar-mode -1)
      (tooltip-mode -1)
      (scroll-bar-mode -1)
      (menu-bar-mode -1))

    ;; Refrash Emacs
    (global-set-key (kbd "<f9>") 'revert-buffer)
  #+END_SRC
  
  + Disable the bell sound
  #+BEGIN_SRC emacs_lisp
  (setq visible-bell t)
  #+END_SRC

  + Change frame caption while switching buffers
  #+BEGIN_SRC emacs-lisp
    (setq frame-title-format "Emacs")
    (defadvice other-window (after advice-other-window-caption activate)
      (if (buffer-file-name (current-buffer))
	  (setq frame-title-format '("in: "
				     (:eval (buffer-file-name (current-buffer)))))))
   #+END_SRC


* Correct Sane defaults
  + Set backspace mode to always delete backward
  #+BEGIN_SRC emacs-lisp
    (if (not window-system) (normal-erase-is-backspace-mode 0))
  #+END_SRC

  + Disable warnings
  #+BEGIN_SRC emacs-lisp
    (setq warning-minimum-level :emergency)
  #+END_SRC
  
  + Enable key strokes
  #+BEGIN_SRC emacs-lisp
    (put 'upcase-region 'disabled nil)
    (put 'downcase-region 'disabled nil)
  #+END_SRC

  + Bundle root directory of user defined modules to the load-paths
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/modules")
  #+END_SRC
  
  + Internal Emacs server that allow for communication between emacsc client and
  the environment. Use *emacsclient* to send file-descriptor to the server
  #+BEGIN_SRC emacs-lisp
    (server-start)
  #+END_SRC

  + Enable UTF-8 everywhere
  #+BEGIN_SRC emacs-lisp
    (setq locale-coding-system 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (set-selection-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
  #+END_SRC

  + Shorten 'yes or no' prompts
  #+BEGIN_SRC emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  + Allow recursive minibuffers
  #+BEGIN_SRC emacs-lisp
    (setq enable-recursive-minibuffers t)
  #+END_SRC

  + Quiet refresh buffer automatically on changes. Hovewer, `revert-buffer` should
  prompt you reload options, similar to VI, in case of a conflict
  #+BEGIN_SRC emacs-lisp
    (setq global-auto-revert-mode t)
    (setq global-auto-revert-non-file-buffers t)
    (setq auto-revert-verbose nil)
  #+END_SRC
  
  + Easly navigate silly-cased words
  #+BEGIN_SRC emacs-lisp
    (global-subword-mode t)
  #+END_SRC

  + Auto save and restore the sessions
  #+BEGIN_SRC emacs-lisp
    (desktop-save-mode 1)
  #+END_SRC

  + Default paragraph
  #+BEGIN_SRC emacs-lisp
    (setq-default fill-column 80)
  #+END_SRC

  + Show keystrokes immediately
  #+BEGIN_SRC emacs-lisp
    (setq echo-keystrokes 0.1)
  #+END_SRC

  + Use system trash
  #+BEGIN_SRC emacs-lisp
    (setq delete-by-moving-to-trash t)
  #+END_SRC

  + Release shift key
  #+BEGIN_SRC emacs-lisp
    (setq shift-select-mode nil)
  #+END_SRC

  + Sentences do NOT need double spaces to end
  #+BEGIN_SRC emacs-lisp
    (setq-default sentence-end-double-space nil)
  #+END_SRC

  + Allow opening compressed files
  #+BEGIN_SRC emacs-lisp
    (auto-compression-mode t)
  #+END_SRC

  + Set lisp eval depth
  #+BEGIN_SRC emacs-lisp
    (setq max-lisp-eval-depth 1000)
  #+END_SRC

  + Set emacs backup files directory
  #+BEGIN_SRC emacs-lisp
    (setq backup-directory-alist
	  `((".*" . ,"/tmp/.backup")))
    (setq auto-save-file-name-transforms
	  `((".*" ,"/tmp/.backup" t)))
  #+END_SRC

  + Enable line number display in some modes
  #+BEGIN_SRC emacs-lisp
    (add-hook 'c-mode-hook #'display-line-numbers-mode)
  #+END_SRC
  
  + Enable hs as global minor mode
  #+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook #'hs-minor-mode)
  #+END_SRC


* Correct Objects
  + Active Babel languages
  #+BEGIN_SRC emacs-lisp
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ruby . t)
       (C . t)))
  #+END_SRC

* Correct Modules
  + Global zoom
  #+BEGIN_SRC emacs-lisp
    (defadvice text-scale-increase (around all-buffers (arg) activate)
      (dolist (buffer (buffer-list))
	(with-current-buffer buffer
	  ad-do-it)))
  #+END_SRC
  
  + Close the damn buffer!
  #+BEGIN_SRC emacs-lisp
    (defun server-edit-or-close (buf)
      "Close the buffer regardless of whether it's a server file or not."
      (interactive "bKill/finish buffer: ")
      (if server-buffer-clients
	  (progn (switch-to-buffer buf) (server-edit))
	(kill-buffer)))
  #+END_SRC

  + Automatically switch to sudo mode when opening a protected file
  #+BEGIN_SRC emacs-lisp
    (defadvice find-file (after advice-find-file-sudo activate)
      "Find file as root if necessary."
      (unless (and buffer-file-name
		   (file-writable-p buffer-file-name))
	(find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
  #+END_SRC

  + Insert file path (designed to insert image paths for blog posts inside org-mode)
    In the spirit of fellow -- ashawley 20080926
  #+BEGIN_SRC emacs-lisp
    (defun insert-path-to-buffer (filename &optional args)
      (interactive "*fInsert file name: \nP")
      (cond ((eq '- args)
	     (insert (file-relative-name filename)))
	    ((not (null args))
	     (insert (expand-file-name filename)))
	    (t
	     (insert filename))))
  #+END_SRC

  + Open the previous buffer while spliting the window
  #+BEGIN_SRC emacs-lisp
    (defun split-and-switch-window-below (&optional args)
      (setq split-window-keep-point)
      (split-window-below))
  #+END_SRC

  + Close buffer and window
  #+BEGIN_SRC emacs-lisp
    (defun close-buffer-and-window ()
      "Close the buffer and window."
      (interactive)
      (server-edit-or-close (current-buffer))
      (delete-window))
  #+END_SRC

* Correct Interface Extensions
  + Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :straight t
      :config 
      (projectile-mode +1)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
  #+END_SRC

  + NeoTree
  #+BEGIN_SRC emacs-lisp
    (use-package neotree
      :straight t
      :bind ("<f8>" . neotree-toggle)
      :config
      (setq neo-theme 'classic)
      (setq projectile-switch-project-action 'neotree-projectile-action))
  #+END_SRC

  + Popup windows setup
  #+BEGIN_SRC emacs-lisp
    (use-package popwin
      :straight t
      :config
      (popwin-mode t))
  #+END_SRC

  + which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :straight t
      :config
      (which-key-mode))
  #+END_SRC

  + A helpful info system
  #+BEGIN_SRC emacs-lisp
    (use-package helpful
      :straight t)
  #+END_SRC

* Correct Auto-completion
  + Yas
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :straight t
      :config
      (yas-global-mode t))
  #+END_SRC

  + Company
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :straight t)
    (add-hook 'after-init-hook 'global-company-mode)
  #+END_SRC


* Correct Auto-validation
  + Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :straight t
      :config
      (global-flycheck-mode))
  #+END_SRC


* Correct TCP/HTTP requests  
  + XML-RPC, xml server requests
  #+BEGIN_SRC emacs-lisp
    (use-package xml-rpc
      :straight t)
  #+END_SRC

  + Debianpaste
  #+BEGIN_SRC emacs-lisp
    ;; Add a bunch of autoloading functions to put into
    ;; evel-after-load
    (autoload 'debpaste-display-paste "debpaste" nil t)
    (autoload 'debpaste-paste-region "debpaste" nil t)
    (autoload 'debpaste-paste-buffer "debpaste" nil t)
    (autoload 'debpaste-delete-paste "debpaste" nil t)

    (with-eval-after-load 'debpaste
      (use-package debpaste
	:load-path "~/.emacs.d/modules/debpaste.el"
	:config
	(delete 'debpaste-display-received-info-in-minibuffer
		debpaste-received-filter-functions)
	(define-key debpaste-command-map "i"
		    'debpaste-display-recived-info-in-buffer)
	(define-key debpaste-command-map "l"
		    'debpaste-display-posted-info-in-buffer)))

  #+END_SRC


* Correct Markdown
  + Org mode
  #+BEGIN_SRC emacs-lisp
    (with-eval-after-load 'ob
      (use-package org-babel-eval-in-repl
	:straight t
	:config
	(define-key org-mode-map (kbd "C-<return>") 'ober-eval-in-repl)
	(define-key org-mode-map (kbd "C-c C-c") 'ober-eval-block-in-repl)
	(with-eval-after-load "eval-in-repl"
	  (setq eir-jump-after-eval nil))))
  #+END_SRC

  + Markdown mode
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :straight t
      :mode ("README\\.md\\'" . gfm-mode)
      :init (setq markdown-command "multimarkdown"))
  #+END_SRC


* Correct Multimedia
  + OSM https://github.com/minad/osm/wiki
  #+BEGIN_SRC emacs-lisp
    (use-package osm
      :straight t
      :bind ("C-c m" . osm-prefix-map) ;; Alternatives: `osm-home' or `osm'
      :custom
      (osm-server 'default)
      (osm-copyright t))
  #+END_SRC

    + PDF-tools
  #+BEGIN_SRC emacs-lisp
    ;; phantom js link
    (add-to-list 'exec-path "/opt/local/bin")
    (setenv "PATH" (mapconcat 'identity exec-path ":"))
    (use-package pdf-tools
      :straight t
      :config
      (pdf-tools-install))
  #+END_SRC


* Correct Backend technologies
  + LSP
  #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :init
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-c l")
      :commands lsp)
    (use-package lsp-ui :commands lsp-ui)
    (use-package helm-lsp
      :straight t
      :commands helm-lsp-workspace-symbol)
    (use-package lsp-ivy 
      :straight t
      :commands lsp-ivy-workspace-symbol)
    (use-package lsp-treemacs
      :straight t
      :commands lsp-treemacs-errors-list)
  #+END_SRC

  + C/C++
  #+BEGIN_SRC emacs-lisp
    (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))      

    (use-package ccls
      :straight t
      :config
      (setq ccls-executable "/usr/bin/ccls")
      (setq ccls-args '("--log-file=/tmp/ccls.log"))
      :hook ((c-mode c++-mode objc-mode cuda-mode) .
	     (lambda () (require 'ccls) (lsp))))

    (use-package dap-mode :straight t)
    (use-package dap-lldb)
  #+END_SRC

  + CMake
  #+BEGIN_SRC emacs-lisp
    (use-package cmake-mode
      :straight t)
  #+END_SRC

  + GO
    https://github.com/dominikh/go-mode.el
  #+BEGIN_SRC emacs-lisp
    (use-package go-mode
      :straight t
      :config
      (use-package go-autocomplete :straight t))
  #+END_SRC
    
  + Ruby
    http://github.com/nonsequitur/inf-ruby
    http://github.com/zenspider/Enhanced-Ruby-Mode
  #+BEGIN_SRC emacs-lisp
    (use-package inf-ruby :straight t)
    (use-package enh-ruby-mode
      :straight t
      :load-path "(path-to)/Enhanced-Ruby-Mode"
      :config
      (autoload 'enh-ruby-mode "enh-ruby-mode" "Major mode for ruby files" t)
      (add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
      (add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))
      ;; inf-ruby repl
      (autoload 'inf-ruby "inf-ruby" "run an inferior ruby process" t)
      (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
      (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter)

      (use-package flymake-ruby :straight t)
      (add-hook 'ruby-mode-hook 'flymake-ruby-load)

      (eval-after-load 'inf-ruby
	'(define-key inf-ruby-minor-mode-map
		     (kbd "C-c s") 'inf-ruby-console-auto)))
  #+end_src
  
  + PHP
    https://github.com/emacs-php/php-mode
    https://github.com/xcwen/ac-php


* Empty Frontend technologies 
  + Coffeescript

  + Ecmascript
    
  + CSS/SASS

  + Multi Web Modes


* Correct Key bandings
  Here are defined most of keybindings, when it makes sens. for
  some, related to specific modes, look to they mode related description.
    
  Compilers/interpreters are by convention bind to C-c C-c.
  #+begin_src emacs-lisp
    ;; map backspace [delete-backward-char] to C-d
    (define-key key-translation-map [?\C-?] [?\C-d])
    ;; map C-d to backspace
    (define-key key-translation-map [?\C-d] [?\C-?])
    ;; map M-h [mark-paragraph] to M-d
    (define-key key-translation-map [?\M-h] [?\M-\d])
    ;; map forward search to not colide with C-s on tmux
    (global-set-key (kbd "S-SPC") 'isearch-forward)
    ;; delete whole line
    (global-set-key (kbd "C-c d") 'kill-whole-line)
    ;; my function bindings
    (global-set-key (kbd "C-c r") 'insert-path-to-buffer)
    ;; lsp shortcuts
    (global-set-key (kbd "C-c g") 'lsp-find-definition)
    ;; block manipulation
    (global-set-key (kbd "C-c c") 'comment-dwim)
    ;; movement
    (global-set-key (kbd "C-c k") 'close-buffer-and-window)
    (global-set-key (kbd "M-n") 'forward-paragraph)
    (global-set-key (kbd "M-p") 'backward-paragraph)
    (global-set-key (kbd "C-c C-2") 'hs-hide-block)
    (global-set-key (kbd "C-c 2") 'hs-show-block)
    (global-set-key (kbd "C-c ! C-2") 'hs-hide-all)
    (global-set-key (kbd "C-c ! 2") 'hs-show-all)
    ;; overwrite defaults
    (global-set-key (kbd "C-x k") 'server-edit-or-close)
    (global-set-key (kbd "C-x C-b") 'project-list-buffers)
    (global-set-key (kbd "C-c f") 'ff-find-other-file)
    ;; project menager
    (keymap-set key-translation-map "C-c SPC" "C-c p c")
    (global-set-key (kbd "C-x f") 'projectile-find-file)
    (global-set-key (kbd "C-c p") 'ffip-create-project-file)
    (global-set-key (kbd "C-x r p") 'project-find-regexp)
    ;; helm-swoop
    ;;(define-key isearch-mode-map "\M-i" 'helm-swoop-from-isearch)
    ;;(define-key helm-swoop-map "\M-i" 'helm-multi-swoop-all-from-helm-swoop)
    (global-set-key (kbd "M-i") 'helm-swoop)
    (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
    (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
    (global-set-key (kbd "M-s s") 'helm-multi-swoop-all)
  #+END_SRC
