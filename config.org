#+SEQ_TODO:  Error(e) Warning(w) | Correct(c)
* config.org - configuration file for Emacs >= 26
This Emacs configuration needs babel-eval to run correctly. All other packages
will be auto installed. Please run this together with "init.el" file which
should be placed in to your "~/.emacs.d".

** Copyright (C) 2017-2018 Daniel Sierpiński <siery@comic.com>

  You can redistribute this document and/or modify it under the terms of the GNU
  General Public License as published by the Free Software Foundation, either
  version 3 of the License, or (at your option) any later version.

  This document is distributed in the hope that it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.


* Correct Create custom-file
  Move all Custom settings variables to custom.el
  #+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file :noerror)
  #+END_SRC
 

* Correct Interface
  Set user's data.
  #+BEGIN_SRC emacs-lisp
  (setq user-full-name "Daniel <Siery> Sierpiński")
  (setq user-mail-address "siery@comic.com")
  #+END_SRC

  Deafult theme.
  #+BEGIN_SRC emacs-lisp
  (use-package zerodark-theme
    :ensure t
    :config
    (load-theme 'zerodark t))
  #+END_SRC

  Font.
  #+BEGIN_SRC emacs-lisp
   (add-to-list 'default-frame-alist '(font . "Liberation Mono-8"))
   #+END_SRC

  Cursor.
  #+BEGIN_SRC emacs-lisp
   (set-cursor-color "orange")
   (blink-cursor-mode -1)
   #+END_SRC
   
  Reset some unhandy interface.
  #+BEGIN_SRC emacs-lisp
  ;; Twick text
  (setq initial-scratch-message ";; SCRATCH YOUR THOUGHTS HERE.\n\n")
  (setq inhibit-startup-echo-area-message "siery")
  (setq inhibit-startup-message t)
  
  ;; Debug
  (setq debug-on-error t)
  
  ;; Window interface
  (when window-system
    (tool-bar-mode -1)
    (tooltip-mode -1)
    (scroll-bar-mode -1))

  (menu-bar-mode -1)
  
  ;; Refrash Emacs
  (global-set-key (kbd "<f9>") 'revert-buffer)
  #+END_SRC
  
  Disable the bell sound.
  #+BEGIN_SRC emacs_lisp
  (setq visible-bell t)
  #+END_SRC

  Change frame caption while switching buffers.
  #+BEGIN_SRC emacs-lisp
  (defadvice other-window (after advice-other-window-caption activate)
      (if (buffer-file-name (current-buffer))
        (setq frame-title-format '("Emacs " emacs-version " in file: "
	  (:eval (buffer-file-name (current-buffer)))))
        (setq frame-title-format '("Emacs " emacs-version))))
   #+END_SRC

   
* Correct Sane defaults
  Bundle root directory of user defined modules to the load-paths.
  #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/modules")
  #+END_SRC
  
  Internal Emacs server that allow for communication between emacsc client and
  the environment. Use *emacsclient* to send file-descriptor to the server.
  #+BEGIN_SRC emacs-lisp
  (server-start)
  #+END_SRC

  Enable UTF-8 everywhere.
  #+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  #+END_SRC

  Shorten 'yes or no' prompts.
  #+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+END_SRC

  Allow recursive minibuffers.
  #+BEGIN_SRC emacs-lisp
  (setq enable-recursive-minibuffers t)
  #+END_SRC

  Quiet refresh buffer automatically on changes.
  #+BEGIN_SRC emacs-lisp
  (setq global-auto-revert-mode t)
  (setq global-auto-revert-non-file-buffers t)
  (setq auto-revert-verbose nil)
  #+END_SRC
  
  Easly navigate silly-cased words.
  #+BEGIN_SRC emacs-lisp
  (global-subword-mode t)
  #+END_SRC

  (w) Auto save and restore the sessions.
  #+BEGIN_SRC emacs-listp
  (desktop-save-mode 1)
  #+END_SRC

  Default paragraph.
  #+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
  #+END_SRC

  Show keystrokes immediately.
  #+BEGIN_SRC emacs-lisp
  (setq echo-keystrokes 0.1)
  #+END_SRC

  Use system trash.
  #+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
  #+END_SRC

  Release shift key.
  #+BEGIN_SRC emacs-lisp
  (setq shift-select-mode nil)
  #+END_SRC

  Sendences do NOT need double spaces to end.
  #+BEGIN_SRC emacs-lisp
  (setq-default sentence-end-double-space nil)
  #+END_SRC

  Allow opening compressed files
  #+BEGIN_SRC emacs-lisp
  (auto-compression-mode t)
  #+END_SRC

  Map DEL key to Redo on some terminals.
  #+BEGIN_SRC emacs-lisp
  (define-key key-translation-map ["DEL"] ["C-_"])
  #+END_SRC

  If you dont mind lousing your backup at accidental crash, go ahead.  
  # Change the backup directory to temporary partition
  # #+BEGIN_SRC emacs-listp
  # (setq auto-save-file-name-transforms `((".*" ,"/tmp/.emacs-backup" t)))
  # #+END_SRC


* Correct Packages control
  #+BEGIN_SRC emacs-lisp
  (use-package try :ensure t)
  #+END_SRC


* Correct Objects
  Active Babel languages.
  #+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((python . t)
      (ruby . t)
      (C . t)))
  #+END_SRC
      
  #+BEGIN_SRC 
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (setq backup-directory-alist
    `((".*" . ,"/tmp/.backup")))
  (setq auto-save-file-name-transforms
    `((".*" ,"/tmp/.backup" t)))

  (setq max-lisp-eval-depth 10000)
  #+END_SRC


* Correct Modules
  Close the deamn buffer.
  #+BEGIN_SRC emacs-lisp
  (defun server-edit-or-close (buf)
    "Close the buffer regardless of whether it's a server file or not."
      (interactive "bKill/finish buffer: ")
        (if server-buffer-clients
	  (progn (switch-to-buffer buf) (server-edit))
	  (kill-buffer)))
  #+END_SRC

  Automatically switch to sudo mode while opening a file when necessary.
  #+BEGIN_SRC
  (defadvice find-file (after advice-find-file-sudo activate)
    "Find file as root if necessary."
      (unless (and buffer-file-name
        (file-writable-p buffer-file-name))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
  #+END_SRC

  Insert file path (designed to insert image paths for blog posts inside org-mode).
  #+BEGIN_SRC emacs-lisp
  (defun insert-path-to-buffer (filename &optional args)
    "Insert FILENAME into buffer after cursor.
  
    Prefixed with \\[universal-argument], expand the file name to
    its fully canocalized path.  See `expand-file-name'.
  
    Prefixed with \\[negative-argument], use relative path to file
    name from current directory, `default-directory'.  See
    `file-relative-name'.
  
    The default with no prefix is to insert the file name exactly as
    it appears in the minibuffer prompt.


In the spirit of fellow -- ashawley 20080926"
    (interactive "*fInsert file name: \nP")
    (cond ((eq '- args)
      (insert (file-relative-name filename)))
        ((not (null args))
	  (insert (expand-file-name filename)))
	(t
	  (insert filename)))
	)
#+END_SRC

  Shuffle paragraphs in semi-random order
  #+BEGIN_SRC
  
  #+END_SRC

  Open the previous buffer while spliting the window
  #+BEGIN_SRC
  (defun split-and-switch-window-below ()
    (setq split-window-keep-point)
    (split-window-below)
    
  )
  #+END_SRC


* Correct Graphic's engine
Popup windows setup.
  #+BEGIN_SRC emacs-lisp
  (use-package popwin
    :ensure t
    :config
    (popwin-mode t))
  #+END_SRC
  
# Helm.
# #+BEGIN_SRC emacs-lisp
#   (use-package helm :ensure t)
#   (use-package helm-swoop
#     :ensure t
#     :config
#     (setq helm-swoop-speed-or-color nil))
# #+END_SRC


* Correct Auto-completion
Yas.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (yas-global-mode t))
#+END_SRC

Auto-complete.
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default))
#+END_SRC

Company.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-tooltip-limit 20)                      ; bigger popup window
    (setq company-idle-delay .3)                         ; decrease delay before autocompletion popup shows
    (setq company-echo-delay 0)                          ; remove annoying blinking
    (setq company-begin-commands '(self-insert-command)) ; start autocompletion only after typing
    
    ;; Some default mode hooks
    (add-to-list 'company-backends 'company-plsense)
    (add-hook 'perl-mode-hook 'company-mode)
    (add-hook 'cperl-mode-hook 'company-mode)
    (add-hook 'after-init-hook 'company-mode))
#+END_SRC


* Correct Auto-validation
Flycheck.
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (global-flycheck-mode))
  #+END_SRC


* Warning TCP/HTTP requests aTTT
  * TODO
    SCP tunneling and Jekyll documenting.
    
  XML-RPC, xml server requests
  #+BEGIN_SRC emacs-lisp
  (use-package xml-rpc
    :ensure t)
  #+END_SRC

  Debianpaste interface
  #+BEGIN_SRC emacs-lisp
    ;; Add a bunch of autoloading functions to put into
    ;; evel-after-load
    (autoload 'debpaste-display-paste "debpaste" nil t)
    (autoload 'debpaste-paste-region "debpaste" nil t)
    (autoload 'debpaste-paste-buffer "debpaste" nil t)
    (autoload 'debpaste-delete-paste "debpaste" nil t)

    (with-eval-after-load 'debpaste
      (use-package debpaste
	:load-path "~/.emacs.d/modules/debpaste.el"
	:config
	(delete 'debpaste-display-received-info-in-minibuffer
	  debpaste-received-filter-functions)
	(define-key debpaste-command-map "i"
	  'debpaste-display-recived-info-in-buffer)
	(define-key debpaste-command-map "l"
	  'debpaste-display-posted-info-in-buffer)))

  #+END_SRC
  

* Correct ORG
  #+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'ob
    (use-package org-babel-eval-in-repl
      :ensure t
      :config
      (define-key org-mode-map (kbd "C-<return>") 'ober-eval-in-repl)
      (define-key org-mode-map (kbd "C-c C-c") 'ober-eval-block-in-repl)
      (with-eval-after-load "eval-in-repl"
        (setq eir-jump-after-eval nil))))
  #+END_SRC
  

* Correct Project menageing
Projectile.
  #+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (setq projectile-enable-caching t) ; To avoid slow indexing
    :config
    (projectile-mode t))
  #+END_SRC

Search support.
#+BEGIN_SRC emacs-lisp
  ;; Enable fd for faster file search
  `(setq ffip-use-rust-fd t)'

  ;; Enable silver-search with helm
  (use-package ag
    :ensure t
    :ensure-system-package (ag . "wajig install ag")
    :config
    (use-package helm-ag-r :ensure t))
#+END_SRC


* Correct Document view
PDF-tools.
  #+BEGIN_SRC emacs-lisp
  ;; phantom js link
  ;;(add-to-list 'exec-path "/opt/local/bin")
  ;;(setenv "PATH" (mapconcat 'identity exec-path ":"))
  (use-package pdf-tools
  :ensure t
  :config
    (pdf-tools-install))
  #+END_SRC


* Correct Git
  *NOTE*
  Avoid using GitHub specific interface due of unclear poilicy.
  #+BEGIN_SRC emacs-lisp
  (use-package git
    :ensure t
    :config
    (autoload 'git-blame-mode "git-blame" "Minor mode for incremental blame for Git." t))
  #+END_SRC
  
  Initialize /gitignore-mode/.
  #+BEGIN_SRC emacs-lisp
  (use-package gitignore-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist
             (cons "/.gitignore\\'" 'gitignore-mode)))
  #+END_SRC
  
  
* Correct REGEX
  #+BEGIN_SRC emacs-lisp
  (use-package pcre2el
  :ensure t
  :config
  (pcre-mode)
  )
  #+END_SRC


* Correct Backend technologies
  + C/C++
    #+BEGIN_SRC emacs-lisp
    (defun my:c-lang-support ()
    ;; Auto-Complete C headers
      (use-package auto-complete-c-headers
        :ensure t
	:config (add-to-list 'ac-sources 'ac-source-c-headers)))

    ;; hook support for c/c++
    (add-hook 'c++-mode-hook 'my:c-lang-support)
    (add-hook 'c-mode-hook 'my:c-lang-support)

    ;; Live compilation
    (with-eval-after-load 'flycheck
      (use-package flycheck-clang-analyzer
        :ensure t
	:config
	  (flycheck-clang-analyzer-setup)))
    #+END_SRC

  + GO
    #+BEGIN_SRC emacs-lisp
    (use-package go-mode
      :ensure t
      :config
      (use-package go-autocomplete :ensure t))
      ;(use-package auto-complete-config :ensure t)
      ;(define-key ac-mode-map (kbd "M-TAB") 'auto-complete))
	    
    #+END_SRC
    
  + Ruby
      #+BEGIN_SRC emacs-lisp
     (use-package inf-ruby :ensure t)
     (use-package enh-ruby-mode
       :ensure t
       :load-path "(path-to)/Enhanced-Ruby-Mode"
       :config
         (autoload 'enh-ruby-mode "enh-ruby-mode" "Major mode for ruby files" t)
         (add-to-list 'auto-mode-alist '("\\.rb$" . enh-ruby-mode))
         (add-to-list 'interpreter-mode-alist '("ruby" . enh-ruby-mode))
	 ;; inf-ruby repl
	 (autoload 'inf-ruby "inf-ruby" "run an inferior ruby process" t)
	 (add-hook 'enh-ruby-mode-hook 'inf-ruby-minor-mode)
	 (add-hook 'compilation-filter-hook 'inf-ruby-auto-enter)

	 (use-package flymake-ruby :ensure t)
	 (add-hook 'ruby-mode-hook 'flymake-ruby-load)

	 (eval-after-load 'inf-ruby
	   '(define-key inf-ruby-minor-mode-map
           (kbd "C-c s") 'inf-ruby-console-auto)))

      #+end_src

  + php
      #+begin_src emacs-lisp
      (use-package php-mode
        :ensure t
	:config
	(defun my:php-mode-hook ()
	"my php mode configuration."
	'(define-abbrev php-mode-abbrev-table "ex" "extends"))
        (add-hook 'php-mode-hook 'my:php-mode-hook)

        ;; gaben - script debug
        (setq load-path (cons "/home/siery/.emacs.d/elpa/geben-20170801.551/" load-path))
        (autoload 'geben "geben" "dbgp protocol frontend, a script debugger" t)
        ;; debug a simple php script.
        (defun my-php-debug ()
          "run current php script for debugging with geben."
          (interactive)
	  (call-interactively 'geben)
	  (shell-command
	    (concat "xdebug_config='idekey=my-php-7.0' /usr/bin/php7.0 "
	    (buffer-file-name) " &")))
	  
        ;; php auto-complete integration
        ; (auto-complete-mode t)
        (use-package ac-php :ensure t)
        (setq ac-sources  '(ac-source-php ) )
        (define-key php-mode-map  (kbd "C-]") 'ac-php-find-symbol-at-point)   ;goto define
        (define-key php-mode-map  (kbd "C-t") 'ac-php-location-stack-back))   ;go back

      ;;(require 'flymake-php)
      ;;add-hook 'php-mode-hook 'flymake-php-load)
      #+end_src
 

* Correct Frontend technologies 
  + coffeescript
    ;; Fix that crap with ac load-up
    #+begin_src emacs-lisp
      ;; (defun coffee-custom ()
      ;;   "coffee mode hook")
      
      (use-package coffee-mode
	:ensure t
	:load-path "~/.emacs.d/modules/ac-coffee/"
	:config
	;; indentation
	(custom-set-variables '(coffee-tab-width 2))

	;; compilation
	(define-key coffee-mode-map (kbd "C-c C-c") 'coffee-compile-buffer)
	(define-key coffee-mode-map (kbd "C-j") 'coffee-newline-and-indent))
    #+end_src

  + ecmascript
    #+begin_src emacs-lisp
    (use-package js3-mode
      :load-path "~/.emacs.d/modules/js3-mode"
      :config
      ;; indentation
      (custom-set-variables '(javascript-tab-width 2)))
    
    ;; js2-mode (as is compatible with mmm)
    (use-package js2-mode
      :ensure t)


    ;; add hooks
    ;;(cl-pushenw 'auto-mode-alist '("\\.js\\'") . js3-mode))
    ;;(add-to-list 'interpreter-mode-alist '("node" . js3-mode))
    #+end_src

    
  + css
    #+begin_src emacs-lisp
    ;; (use-package flymake-css
    ;;   :ensure t
    ;;   :config (add-hook 'css-mode-hook 'flymake-css-load))
    ;;(require 'haml-mode)
    (use-package sass-mode
      :ensure t)
    #+end_src

  + multi web modes
    #+begin_src emacs-lisp
    ;; multi web mode
    (use-package multi-web-mode
      :ensure t
      :init
      (setq mweb-default-major-mode 'html-mode)
      :config
      (setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?= " "\\?>")
        (js2-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
        (css-mode "<style +type=\"text/css\"[^>]*>" "</style>"))))
    (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
    (multi-web-global-mode t)

    ;; mmm mode
    ;;(use-package mmm-mode :ensure t)
    ;;
    ;;(setq mmm-global-mode 'maybe)
    ;;(mmm-add-mode-ext-class 'html-mode "\\.php\\'" 'html-php)

    ;; set js2 mode as default
    ;;(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    ;;(add-to-list 'interpreter-mode-alist '("node" . js2-mode))
    ;;(add-hook 'js2-mode-hook 'ac-js2-mode)
    ;;`(setq ac-js2-evaluate-calls t)
    ;; js experimental libs
    ;(add-to-list 'ac-js2-external-libraries "path/to/lib/library.js")'
    
    ;; hook skewer mode
    ;;(add-hook 'js3-mode-hook 'skewer-mode)
    ;;(add-hook 'css-mode-hook 'skewer-css-mode)
    ;;(add-hook 'html-mode-hook 'skewer-html-mode)
    #+end_src


* Correct Key bandings
  Here are defined most of keybindings, when it makes sens. for
  some, related to specific modes, look to they mode related description.
  + *TODO*
    
    Bind compilers/interpreters in buffer to the function. Paste the function
    call here to set the function to C-c C-c binding.
  #+begin_src emacs-lisp
  ;; ensure the undo command
  (global-set-key (kbd "C-_") `undo)
  ;; my functions:
  (define-key php-mode-map (kbd "C-c C-c") 'my-php-debug)
  (global-set-key (kbd "C-c r") 'insert-path-to-buffer)
  ;; movement
  (global-set-key (kbd "M-n") 'forward-paragraph)
  (global-set-key (kbd "M-p") 'backward-paragraph)
  (global-set-key (kbd "C-c C-2") 'hs-hide-block)
  (global-set-key (kbd "C-c 2") 'hs-show-block)
  (global-set-key (kbd "C-c ! C-2") 'hs-hide-all)
  (global-set-key (kbd "C-c ! 2") 'hs-show-all)
  ;; overwrite defaults:
  (global-set-key (kbd "C-x k") 'server-edit-or-close)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-c f") 'ff-find-other-file)
  ;; project menager
  (global-set-key (kbd "C-x f") 'find-file-in-project)
  (global-set-key (kbd "C-c p") 'ffip-create-project-file)
  (global-set-key (kbd "C-x r p") 'project-find-regexp)
  ;; Helm-swoop:
  ;;(define-key isearch-mode-map "\M-i" 'helm-swoop-from-isearch)
  ;;(define-key helm-swoop-map "\M-i" 'helm-multi-swoop-all-from-helm-swoop)
  (global-set-key (kbd "M-i") 'helm-swoop)
  (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
  (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
  (global-set-key (kbd "M-s s") 'helm-multi-swoop-all)
  #+END_SRC

